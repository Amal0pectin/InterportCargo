// <auto-generated />
using System;
using Interport_Amal.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Interport_Amal.Migrations
{
    [DbContext(typeof(CargoDBContext))]
    [Migration("20250608093930_RateSchedulworking")]
    partial class RateSchedulworking
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("Interport_Amal.BusinessLogic.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Phone")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("Interport_Amal.BusinessLogic.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmployeeType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Phone")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Interport_Amal.BusinessLogic.Entities.Quotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateIssued")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuotationRequestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ScopeDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalCharge")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("QuotationRequestId");

                    b.ToTable("Quotation", (string)null);
                });

            modelBuilder.Entity("Interport_Amal.BusinessLogic.Entities.QuotationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContainerType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("QuotationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RateScheduleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("QuotationId");

                    b.HasIndex("RateScheduleId");

                    b.ToTable("QuotationItem", (string)null);
                });

            modelBuilder.Entity("Interport_Amal.BusinessLogic.Entities.QuotationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContainerCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateSubmitted")
                        .HasColumnType("TEXT");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Height")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Length")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NatureOfJob")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PackageType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("RequiresFumigation")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RequiresQuarantine")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Width")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("QuotationRequest", (string)null);
                });

            modelBuilder.Entity("Interport_Amal.BusinessLogic.Entities.RateSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChargeType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rate20Ft")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rate40Ft")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("RateSchedule", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChargeType = "Warf Booking Fee",
                            Rate20Ft = 60.0m,
                            Rate40Ft = 70.0m
                        },
                        new
                        {
                            Id = 2,
                            ChargeType = "Lift on/Lift Off",
                            Rate20Ft = 80.0m,
                            Rate40Ft = 120.0m
                        },
                        new
                        {
                            Id = 3,
                            ChargeType = "Fumigation",
                            Rate20Ft = 220.0m,
                            Rate40Ft = 280.0m
                        },
                        new
                        {
                            Id = 4,
                            ChargeType = "LCL Delivery Depot",
                            Rate20Ft = 400.0m,
                            Rate40Ft = 500.0m
                        },
                        new
                        {
                            Id = 5,
                            ChargeType = "Tailgate Inspection",
                            Rate20Ft = 120.0m,
                            Rate40Ft = 160.0m
                        },
                        new
                        {
                            Id = 6,
                            ChargeType = "Storage Fee",
                            Rate20Ft = 240.0m,
                            Rate40Ft = 300.0m
                        },
                        new
                        {
                            Id = 7,
                            ChargeType = "Facility Fee",
                            Rate20Ft = 70.0m,
                            Rate40Ft = 100.0m
                        },
                        new
                        {
                            Id = 8,
                            ChargeType = "Warf Inspection",
                            Rate20Ft = 60.0m,
                            Rate40Ft = 90.0m
                        });
                });

            modelBuilder.Entity("Interport_Amal.BusinessLogic.Entities.Quotation", b =>
                {
                    b.HasOne("Interport_Amal.BusinessLogic.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interport_Amal.BusinessLogic.Entities.QuotationRequest", "QuotationRequest")
                        .WithMany("Quotations")
                        .HasForeignKey("QuotationRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("QuotationRequest");
                });

            modelBuilder.Entity("Interport_Amal.BusinessLogic.Entities.QuotationItem", b =>
                {
                    b.HasOne("Interport_Amal.BusinessLogic.Entities.Quotation", "Quotation")
                        .WithMany("Items")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Interport_Amal.BusinessLogic.Entities.RateSchedule", "RateSchedule")
                        .WithMany()
                        .HasForeignKey("RateScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quotation");

                    b.Navigation("RateSchedule");
                });

            modelBuilder.Entity("Interport_Amal.BusinessLogic.Entities.QuotationRequest", b =>
                {
                    b.HasOne("Interport_Amal.BusinessLogic.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Interport_Amal.BusinessLogic.Entities.Quotation", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Interport_Amal.BusinessLogic.Entities.QuotationRequest", b =>
                {
                    b.Navigation("Quotations");
                });
#pragma warning restore 612, 618
        }
    }
}
